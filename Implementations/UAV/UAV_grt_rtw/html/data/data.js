var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"UAV","ref":false,"files":[{"name":"UAV.cpp","type":"source","group":"model","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * UAV.cpp\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"UAV.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"UAV_private.h\"\r\n\r\n/*\r\n * This function updates continuous states using the ODE3 fixed-step\r\n * solver algorithm\r\n */\r\nvoid UAV::rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  /* Solver Matrices */\r\n  static const real_T rt_ODE3_A[3]{\r\n    1.0/2.0, 3.0/4.0, 1.0\r\n  };\r\n\r\n  static const real_T rt_ODE3_B[3][3]{\r\n    { 1.0/2.0, 0.0, 0.0 },\r\n\r\n    { 0.0, 3.0/4.0, 0.0 },\r\n\r\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\r\n  };\r\n\r\n  time_T t { rtsiGetT(si) };\r\n\r\n  time_T tnew { rtsiGetSolverStopTime(si) };\r\n\r\n  time_T h { rtsiGetStepSize(si) };\r\n\r\n  real_T *x { rtsiGetContStates(si) };\r\n\r\n  ODE3_IntgData *id { static_cast<ODE3_IntgData *>(rtsiGetSolverData(si)) };\r\n\r\n  real_T *y { id->y };\r\n\r\n  real_T *f0 { id->f[0] };\r\n\r\n  real_T *f1 { id->f[1] };\r\n\r\n  real_T *f2 { id->f[2] };\r\n\r\n  real_T hB[3];\r\n  int_T i;\r\n  int_T nXc { 5 };\r\n\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) std::memcpy(y, x,\r\n                     static_cast<uint_T>(nXc)*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  UAV_derivatives();\r\n\r\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\r\n  hB[0] = h * rt_ODE3_B[0][0];\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\r\n  rtsiSetdX(si, f1);\r\n  this->step();\r\n  UAV_derivatives();\r\n\r\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\r\n  for (i = 0; i <= 1; i++) {\r\n    hB[i] = h * rt_ODE3_B[1][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\r\n  rtsiSetdX(si, f2);\r\n  this->step();\r\n  UAV_derivatives();\r\n\r\n  /* tnew = t + hA(3);\r\n     ynew = y + f*hB(:,3); */\r\n  for (i = 0; i <= 2; i++) {\r\n    hB[i] = h * rt_ODE3_B[2][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\r\n  }\r\n\r\n  rtsiSetT(si, tnew);\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\n/* Model step function */\r\nvoid UAV::step()\r\n{\r\n  real_T rtb_s;\r\n  if (rtmIsMajorTimeStep((&UAV_M))) {\r\n    /* set solver stop time */\r\n    if (!((&UAV_M)->Timing.clockTick0+1)) {\r\n      rtsiSetSolverStopTime(&(&UAV_M)->solverInfo, (((&UAV_M)\r\n        ->Timing.clockTickH0 + 1) * (&UAV_M)->Timing.stepSize0 * 4294967296.0));\r\n    } else {\r\n      rtsiSetSolverStopTime(&(&UAV_M)->solverInfo, (((&UAV_M)->Timing.clockTick0\r\n        + 1) * (&UAV_M)->Timing.stepSize0 + (&UAV_M)->Timing.clockTickH0 *\r\n        (&UAV_M)->Timing.stepSize0 * 4294967296.0));\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep((&UAV_M))) {\r\n    (&UAV_M)->Timing.t[0] = rtsiGetT(&(&UAV_M)->solverInfo);\r\n  }\r\n\r\n  /* Step: '<Root>/Step' */\r\n  if ((&UAV_M)->Timing.t[0] < UAV_P.angle_change_start_time) {\r\n    rtb_s = UAV_P.initial_angle;\r\n  } else {\r\n    rtb_s = UAV_P.final_angle;\r\n  }\r\n\r\n  /* Sum: '<Root>/Sum' incorporates:\r\n   *  Step: '<Root>/Step'\r\n   *  TransferFcn: '<Root>/Transfer Fcn'\r\n   */\r\n  rtb_s -= (UAV_P.TransferFcn_C[0] * UAV_X.TransferFcn_CSTATE[0] +\r\n            UAV_P.TransferFcn_C[1] * UAV_X.TransferFcn_CSTATE[1]) +\r\n    UAV_P.TransferFcn_C[2] * UAV_X.TransferFcn_CSTATE[2];\r\n\r\n  /* Gain: '<S33>/Integral Gain' */\r\n  UAV_B.IntegralGain = UAV_P.Ki * rtb_s;\r\n\r\n  /* Gain: '<S39>/Filter Coefficient' incorporates:\r\n   *  Gain: '<S29>/Derivative Gain'\r\n   *  Integrator: '<S31>/Filter'\r\n   *  Sum: '<S31>/SumD'\r\n   */\r\n  UAV_B.FilterCoefficient = (UAV_P.Kd * rtb_s - UAV_X.Filter_CSTATE) *\r\n    UAV_P.PIDController_N;\r\n\r\n  /* Sum: '<S45>/Sum' incorporates:\r\n   *  Gain: '<S41>/Proportional Gain'\r\n   *  Integrator: '<S36>/Integrator'\r\n   */\r\n  UAV_B.Sum = (UAV_P.Kp * rtb_s + UAV_X.Integrator_CSTATE) +\r\n    UAV_B.FilterCoefficient;\r\n  if (rtmIsMajorTimeStep((&UAV_M))) {\r\n    rt_ertODEUpdateContinuousStates(&(&UAV_M)->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     * Timer of this task consists of two 32 bit unsigned integers.\r\n     * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n     * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n     */\r\n    if (!(++(&UAV_M)->Timing.clockTick0)) {\r\n      ++(&UAV_M)->Timing.clockTickH0;\r\n    }\r\n\r\n    (&UAV_M)->Timing.t[0] = rtsiGetSolverStopTime(&(&UAV_M)->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [0.0001s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 0.0001, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       * Timer of this task consists of two 32 bit unsigned integers.\r\n       * The two integers represent the low bits Timing.clockTick1 and the high bits\r\n       * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\r\n       */\r\n      (&UAV_M)->Timing.clockTick1++;\r\n      if (!(&UAV_M)->Timing.clockTick1) {\r\n        (&UAV_M)->Timing.clockTickH1++;\r\n      }\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid UAV::UAV_derivatives()\r\n{\r\n  XDot_UAV_T *_rtXdot;\r\n  _rtXdot = ((XDot_UAV_T *) (&UAV_M)->derivs);\r\n\r\n  /* Derivatives for TransferFcn: '<Root>/Transfer Fcn' */\r\n  _rtXdot->TransferFcn_CSTATE[0] = UAV_P.TransferFcn_A[0] *\r\n    UAV_X.TransferFcn_CSTATE[0];\r\n  _rtXdot->TransferFcn_CSTATE[0] += UAV_P.TransferFcn_A[1] *\r\n    UAV_X.TransferFcn_CSTATE[1];\r\n  _rtXdot->TransferFcn_CSTATE[0] += UAV_P.TransferFcn_A[2] *\r\n    UAV_X.TransferFcn_CSTATE[2];\r\n  _rtXdot->TransferFcn_CSTATE[1] = UAV_X.TransferFcn_CSTATE[0];\r\n  _rtXdot->TransferFcn_CSTATE[2] = UAV_X.TransferFcn_CSTATE[1];\r\n  _rtXdot->TransferFcn_CSTATE[0] += UAV_B.Sum;\r\n\r\n  /* Derivatives for Integrator: '<S31>/Filter' */\r\n  _rtXdot->Filter_CSTATE = UAV_B.FilterCoefficient;\r\n\r\n  /* Derivatives for Integrator: '<S36>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE = UAV_B.IntegralGain;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid UAV::initialize()\r\n{\r\n  /* Registration code */\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&(&UAV_M)->solverInfo, &(&UAV_M)->Timing.simTimeStep);\r\n    rtsiSetTPtr(&(&UAV_M)->solverInfo, &rtmGetTPtr((&UAV_M)));\r\n    rtsiSetStepSizePtr(&(&UAV_M)->solverInfo, &(&UAV_M)->Timing.stepSize0);\r\n    rtsiSetdXPtr(&(&UAV_M)->solverInfo, &(&UAV_M)->derivs);\r\n    rtsiSetContStatesPtr(&(&UAV_M)->solverInfo, (real_T **) &(&UAV_M)\r\n                         ->contStates);\r\n    rtsiSetNumContStatesPtr(&(&UAV_M)->solverInfo, &(&UAV_M)\r\n      ->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&(&UAV_M)->solverInfo, &(&UAV_M)\r\n      ->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&(&UAV_M)->solverInfo, &(&UAV_M)\r\n      ->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&(&UAV_M)->solverInfo, &(&UAV_M)\r\n      ->periodicContStateRanges);\r\n    rtsiSetContStateDisabledPtr(&(&UAV_M)->solverInfo, (boolean_T**) &(&UAV_M)\r\n      ->contStateDisabled);\r\n    rtsiSetErrorStatusPtr(&(&UAV_M)->solverInfo, (&rtmGetErrorStatus((&UAV_M))));\r\n    rtsiSetRTModelPtr(&(&UAV_M)->solverInfo, (&UAV_M));\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&(&UAV_M)->solverInfo, MAJOR_TIME_STEP);\r\n  rtsiSetIsMinorTimeStepWithModeChange(&(&UAV_M)->solverInfo, false);\r\n  rtsiSetIsContModeFrozen(&(&UAV_M)->solverInfo, false);\r\n  (&UAV_M)->intgData.y = (&UAV_M)->odeY;\r\n  (&UAV_M)->intgData.f[0] = (&UAV_M)->odeF[0];\r\n  (&UAV_M)->intgData.f[1] = (&UAV_M)->odeF[1];\r\n  (&UAV_M)->intgData.f[2] = (&UAV_M)->odeF[2];\r\n  (&UAV_M)->contStates = ((X_UAV_T *) &UAV_X);\r\n  (&UAV_M)->contStateDisabled = ((XDis_UAV_T *) &UAV_XDis);\r\n  (&UAV_M)->Timing.tStart = (0.0);\r\n  rtsiSetSolverData(&(&UAV_M)->solverInfo, static_cast<void *>(&(&UAV_M)\r\n    ->intgData));\r\n  rtsiSetSolverName(&(&UAV_M)->solverInfo,\"ode3\");\r\n  rtmSetTPtr((&UAV_M), &(&UAV_M)->Timing.tArray[0]);\r\n  (&UAV_M)->Timing.stepSize0 = 0.0001;\r\n\r\n  /* InitializeConditions for TransferFcn: '<Root>/Transfer Fcn' */\r\n  UAV_X.TransferFcn_CSTATE[0] = 0.0;\r\n  UAV_X.TransferFcn_CSTATE[1] = 0.0;\r\n  UAV_X.TransferFcn_CSTATE[2] = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S31>/Filter' */\r\n  UAV_X.Filter_CSTATE = UAV_P.PIDController_InitialConditionF;\r\n\r\n  /* InitializeConditions for Integrator: '<S36>/Integrator' */\r\n  UAV_X.Integrator_CSTATE = UAV_P.PIDController_InitialConditio_h;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid UAV::terminate()\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/* Constructor */\r\nUAV::UAV() :\r\n  UAV_B(),\r\n  UAV_X(),\r\n  UAV_XDis(),\r\n  UAV_M()\r\n{\r\n  /* Currently there is no constructor body generated.*/\r\n}\r\n\r\n/* Destructor */\r\n/* Currently there is no destructor body generated.*/\r\nUAV::~UAV() = default;\r\n\r\n/* Real-Time Model get method */\r\nRT_MODEL_UAV_T * UAV::getRTM()\r\n{\r\n  return (&UAV_M);\r\n}\r\n"},{"name":"UAV.h","type":"header","group":"model","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * UAV.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef UAV_h_\r\n#define UAV_h_\r\n#include <cmath>\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#include \"UAV_types.h\"\r\n#include <cstring>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetContStateDisabled\r\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\r\n#endif\r\n\r\n#ifndef rtmSetContStateDisabled\r\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContStates\r\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\r\n#endif\r\n\r\n#ifndef rtmSetContStates\r\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\r\n#endif\r\n\r\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\r\n#endif\r\n\r\n#ifndef rtmGetDerivCacheNeedsReset\r\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetDerivCacheNeedsReset\r\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetIntgData\r\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\r\n#endif\r\n\r\n#ifndef rtmSetIntgData\r\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeF\r\n#define rtmGetOdeF(rtm)                ((rtm)->odeF)\r\n#endif\r\n\r\n#ifndef rtmSetOdeF\r\n#define rtmSetOdeF(rtm, val)           ((rtm)->odeF = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeY\r\n#define rtmGetOdeY(rtm)                ((rtm)->odeY)\r\n#endif\r\n\r\n#ifndef rtmSetOdeY\r\n#define rtmSetOdeY(rtm, val)           ((rtm)->odeY = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateIndices\r\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateIndices\r\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateRanges\r\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateRanges\r\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\r\n#endif\r\n\r\n#ifndef rtmGetZCCacheNeedsReset\r\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetZCCacheNeedsReset\r\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetdX\r\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\r\n#endif\r\n\r\n#ifndef rtmSetdX\r\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n#ifndef rtmGetTStart\r\n#define rtmGetTStart(rtm)              ((rtm)->Timing.tStart)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\nstruct B_UAV_T {\r\n  real_T IntegralGain;                 /* '<S33>/Integral Gain' */\r\n  real_T FilterCoefficient;            /* '<S39>/Filter Coefficient' */\r\n  real_T Sum;                          /* '<S45>/Sum' */\r\n};\r\n\r\n/* Continuous states (default storage) */\r\nstruct X_UAV_T {\r\n  real_T TransferFcn_CSTATE[3];        /* '<Root>/Transfer Fcn' */\r\n  real_T Filter_CSTATE;                /* '<S31>/Filter' */\r\n  real_T Integrator_CSTATE;            /* '<S36>/Integrator' */\r\n};\r\n\r\n/* State derivatives (default storage) */\r\nstruct XDot_UAV_T {\r\n  real_T TransferFcn_CSTATE[3];        /* '<Root>/Transfer Fcn' */\r\n  real_T Filter_CSTATE;                /* '<S31>/Filter' */\r\n  real_T Integrator_CSTATE;            /* '<S36>/Integrator' */\r\n};\r\n\r\n/* State disabled  */\r\nstruct XDis_UAV_T {\r\n  boolean_T TransferFcn_CSTATE[3];     /* '<Root>/Transfer Fcn' */\r\n  boolean_T Filter_CSTATE;             /* '<S31>/Filter' */\r\n  boolean_T Integrator_CSTATE;         /* '<S36>/Integrator' */\r\n};\r\n\r\n#ifndef ODE3_INTG\r\n#define ODE3_INTG\r\n\r\n/* ODE3 Integration Data */\r\nstruct ODE3_IntgData {\r\n  real_T *y;                           /* output */\r\n  real_T *f[3];                        /* derivatives */\r\n};\r\n\r\n#endif\r\n\r\n/* Parameters (default storage) */\r\nstruct P_UAV_T_ {\r\n  real_T Kd;                           /* Variable: Kd\r\n                                        * Referenced by: '<S29>/Derivative Gain'\r\n                                        */\r\n  real_T Ki;                           /* Variable: Ki\r\n                                        * Referenced by: '<S33>/Integral Gain'\r\n                                        */\r\n  real_T Kp;                           /* Variable: Kp\r\n                                        * Referenced by: '<S41>/Proportional Gain'\r\n                                        */\r\n  real_T angle_change_start_time;      /* Variable: angle_change_start_time\r\n                                        * Referenced by: '<Root>/Step'\r\n                                        */\r\n  real_T final_angle;                  /* Variable: final_angle\r\n                                        * Referenced by: '<Root>/Step'\r\n                                        */\r\n  real_T initial_angle;                /* Variable: initial_angle\r\n                                        * Referenced by: '<Root>/Step'\r\n                                        */\r\n  real_T PIDController_InitialConditionF;\r\n                              /* Mask Parameter: PIDController_InitialConditionF\r\n                               * Referenced by: '<S31>/Filter'\r\n                               */\r\n  real_T PIDController_InitialConditio_h;\r\n                              /* Mask Parameter: PIDController_InitialConditio_h\r\n                               * Referenced by: '<S36>/Integrator'\r\n                               */\r\n  real_T PIDController_N;              /* Mask Parameter: PIDController_N\r\n                                        * Referenced by: '<S39>/Filter Coefficient'\r\n                                        */\r\n  real_T TransferFcn_A[3];             /* Computed Parameter: TransferFcn_A\r\n                                        * Referenced by: '<Root>/Transfer Fcn'\r\n                                        */\r\n  real_T TransferFcn_C[3];             /* Computed Parameter: TransferFcn_C\r\n                                        * Referenced by: '<Root>/Transfer Fcn'\r\n                                        */\r\n};\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_UAV_T {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  X_UAV_T *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  XDis_UAV_T *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  real_T odeY[5];\r\n  real_T odeF[3][5];\r\n  ODE3_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    uint32_T clockTickH1;\r\n    time_T tStart;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Class declaration for model UAV */\r\nclass UAV final\r\n{\r\n  /* public data and function members */\r\n public:\r\n  /* Copy Constructor */\r\n  UAV(UAV const&) = delete;\r\n\r\n  /* Assignment Operator */\r\n  UAV& operator= (UAV const&) & = delete;\r\n\r\n  /* Move Constructor */\r\n  UAV(UAV &&) = delete;\r\n\r\n  /* Move Assignment Operator */\r\n  UAV& operator= (UAV &&) = delete;\r\n\r\n  /* Real-Time Model get method */\r\n  RT_MODEL_UAV_T * getRTM();\r\n\r\n  /* Initial conditions function */\r\n  void initialize();\r\n\r\n  /* model step function */\r\n  void step();\r\n\r\n  /* model terminate function */\r\n  static void terminate();\r\n\r\n  /* Constructor */\r\n  UAV();\r\n\r\n  /* Destructor */\r\n  ~UAV();\r\n\r\n  /* private data and function members */\r\n private:\r\n  /* Block signals */\r\n  B_UAV_T UAV_B;\r\n\r\n  /* Tunable parameters */\r\n  static P_UAV_T UAV_P;\r\n\r\n  /* Block continuous states */\r\n  X_UAV_T UAV_X;\r\n\r\n  /* Block Continuous state disabled vector */\r\n  XDis_UAV_T UAV_XDis;\r\n\r\n  /* Global mass matrix */\r\n\r\n  /* Continuous states update member function*/\r\n  void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si );\r\n\r\n  /* Derivatives member function */\r\n  void UAV_derivatives();\r\n\r\n  /* Real-Time Model */\r\n  RT_MODEL_UAV_T UAV_M;\r\n};\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Scope' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'UAV'\r\n * '<S1>'   : 'UAV/PID Controller'\r\n * '<S2>'   : 'UAV/PID Controller/Anti-windup'\r\n * '<S3>'   : 'UAV/PID Controller/D Gain'\r\n * '<S4>'   : 'UAV/PID Controller/External Derivative'\r\n * '<S5>'   : 'UAV/PID Controller/Filter'\r\n * '<S6>'   : 'UAV/PID Controller/Filter ICs'\r\n * '<S7>'   : 'UAV/PID Controller/I Gain'\r\n * '<S8>'   : 'UAV/PID Controller/Ideal P Gain'\r\n * '<S9>'   : 'UAV/PID Controller/Ideal P Gain Fdbk'\r\n * '<S10>'  : 'UAV/PID Controller/Integrator'\r\n * '<S11>'  : 'UAV/PID Controller/Integrator ICs'\r\n * '<S12>'  : 'UAV/PID Controller/N Copy'\r\n * '<S13>'  : 'UAV/PID Controller/N Gain'\r\n * '<S14>'  : 'UAV/PID Controller/P Copy'\r\n * '<S15>'  : 'UAV/PID Controller/Parallel P Gain'\r\n * '<S16>'  : 'UAV/PID Controller/Reset Signal'\r\n * '<S17>'  : 'UAV/PID Controller/Saturation'\r\n * '<S18>'  : 'UAV/PID Controller/Saturation Fdbk'\r\n * '<S19>'  : 'UAV/PID Controller/Sum'\r\n * '<S20>'  : 'UAV/PID Controller/Sum Fdbk'\r\n * '<S21>'  : 'UAV/PID Controller/Tracking Mode'\r\n * '<S22>'  : 'UAV/PID Controller/Tracking Mode Sum'\r\n * '<S23>'  : 'UAV/PID Controller/Tsamp - Integral'\r\n * '<S24>'  : 'UAV/PID Controller/Tsamp - Ngain'\r\n * '<S25>'  : 'UAV/PID Controller/postSat Signal'\r\n * '<S26>'  : 'UAV/PID Controller/preInt Signal'\r\n * '<S27>'  : 'UAV/PID Controller/preSat Signal'\r\n * '<S28>'  : 'UAV/PID Controller/Anti-windup/Passthrough'\r\n * '<S29>'  : 'UAV/PID Controller/D Gain/Internal Parameters'\r\n * '<S30>'  : 'UAV/PID Controller/External Derivative/Error'\r\n * '<S31>'  : 'UAV/PID Controller/Filter/Cont. Filter'\r\n * '<S32>'  : 'UAV/PID Controller/Filter ICs/Internal IC - Filter'\r\n * '<S33>'  : 'UAV/PID Controller/I Gain/Internal Parameters'\r\n * '<S34>'  : 'UAV/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S35>'  : 'UAV/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S36>'  : 'UAV/PID Controller/Integrator/Continuous'\r\n * '<S37>'  : 'UAV/PID Controller/Integrator ICs/Internal IC'\r\n * '<S38>'  : 'UAV/PID Controller/N Copy/Disabled'\r\n * '<S39>'  : 'UAV/PID Controller/N Gain/Internal Parameters'\r\n * '<S40>'  : 'UAV/PID Controller/P Copy/Disabled'\r\n * '<S41>'  : 'UAV/PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S42>'  : 'UAV/PID Controller/Reset Signal/Disabled'\r\n * '<S43>'  : 'UAV/PID Controller/Saturation/Passthrough'\r\n * '<S44>'  : 'UAV/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S45>'  : 'UAV/PID Controller/Sum/Sum_PID'\r\n * '<S46>'  : 'UAV/PID Controller/Sum Fdbk/Disabled'\r\n * '<S47>'  : 'UAV/PID Controller/Tracking Mode/Disabled'\r\n * '<S48>'  : 'UAV/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S49>'  : 'UAV/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n * '<S50>'  : 'UAV/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S51>'  : 'UAV/PID Controller/postSat Signal/Forward_Path'\r\n * '<S52>'  : 'UAV/PID Controller/preInt Signal/Internal PreInt'\r\n * '<S53>'  : 'UAV/PID Controller/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* UAV_h_ */\r\n"},{"name":"UAV_private.h","type":"header","group":"model","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * UAV_private.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef UAV_private_h_\r\n#define UAV_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"multiword_types.h\"\r\n#include \"UAV_types.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* private model entry point functions */\r\nextern void UAV_derivatives();\r\n\r\n#endif                                 /* UAV_private_h_ */\r\n"},{"name":"UAV_types.h","type":"header","group":"model","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * UAV_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef UAV_types_h_\r\n#define UAV_types_h_\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_UAV_T_ P_UAV_T;\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_UAV_T RT_MODEL_UAV_T;\r\n\r\n#endif                                 /* UAV_types_h_ */\r\n"},{"name":"UAV_data.cpp","type":"source","group":"data","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * UAV_data.cpp\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"UAV.h\"\r\n\r\n/* Block parameters (default storage) */\r\nP_UAV_T UAV::UAV_P{\r\n  /* Variable: Kd\r\n   * Referenced by: '<S29>/Derivative Gain'\r\n   */\r\n  1.10844,\r\n\r\n  /* Variable: Ki\r\n   * Referenced by: '<S33>/Integral Gain'\r\n   */\r\n  2.48,\r\n\r\n  /* Variable: Kp\r\n   * Referenced by: '<S41>/Proportional Gain'\r\n   */\r\n  30.7142,\r\n\r\n  /* Variable: angle_change_start_time\r\n   * Referenced by: '<Root>/Step'\r\n   */\r\n  1.0,\r\n\r\n  /* Variable: final_angle\r\n   * Referenced by: '<Root>/Step'\r\n   */\r\n  1.0,\r\n\r\n  /* Variable: initial_angle\r\n   * Referenced by: '<Root>/Step'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PIDController_InitialConditionF\r\n   * Referenced by: '<S31>/Filter'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PIDController_InitialConditio_h\r\n   * Referenced by: '<S36>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PIDController_N\r\n   * Referenced by: '<S39>/Filter Coefficient'\r\n   */\r\n  100.0,\r\n\r\n  /* Computed Parameter: TransferFcn_A\r\n   * Referenced by: '<Root>/Transfer Fcn'\r\n   */\r\n  { -6.9676, -12.941, -0.0 },\r\n\r\n  /* Computed Parameter: TransferFcn_C\r\n   * Referenced by: '<Root>/Transfer Fcn'\r\n   */\r\n  { 0.0, 11.7304, 22.578 }\r\n};\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long int long_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint32_T chunks[2];\r\n} int64m_T;\r\n\r\ntypedef struct {\r\n  int64m_T re;\r\n  int64m_T im;\r\n} cint64m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[2];\r\n} uint64m_T;\r\n\r\ntypedef struct {\r\n  uint64m_T re;\r\n  uint64m_T im;\r\n} cuint64m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[3];\r\n} int96m_T;\r\n\r\ntypedef struct {\r\n  int96m_T re;\r\n  int96m_T im;\r\n} cint96m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[3];\r\n} uint96m_T;\r\n\r\ntypedef struct {\r\n  uint96m_T re;\r\n  uint96m_T im;\r\n} cuint96m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[4];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[4];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[5];\r\n} int160m_T;\r\n\r\ntypedef struct {\r\n  int160m_T re;\r\n  int160m_T im;\r\n} cint160m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[5];\r\n} uint160m_T;\r\n\r\ntypedef struct {\r\n  uint160m_T re;\r\n  uint160m_T im;\r\n} cuint160m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[6];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[6];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[7];\r\n} int224m_T;\r\n\r\ntypedef struct {\r\n  int224m_T re;\r\n  int224m_T im;\r\n} cint224m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[7];\r\n} uint224m_T;\r\n\r\ntypedef struct {\r\n  uint224m_T re;\r\n  uint224m_T im;\r\n} cuint224m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[8];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[8];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[9];\r\n} int288m_T;\r\n\r\ntypedef struct {\r\n  int288m_T re;\r\n  int288m_T im;\r\n} cint288m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[9];\r\n} uint288m_T;\r\n\r\ntypedef struct {\r\n  uint288m_T re;\r\n  uint288m_T im;\r\n} cuint288m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[10];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[10];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[11];\r\n} int352m_T;\r\n\r\ntypedef struct {\r\n  int352m_T re;\r\n  int352m_T im;\r\n} cint352m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[11];\r\n} uint352m_T;\r\n\r\ntypedef struct {\r\n  uint352m_T re;\r\n  uint352m_T im;\r\n} cuint352m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[12];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[12];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[13];\r\n} int416m_T;\r\n\r\ntypedef struct {\r\n  int416m_T re;\r\n  int416m_T im;\r\n} cint416m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[13];\r\n} uint416m_T;\r\n\r\ntypedef struct {\r\n  uint416m_T re;\r\n  uint416m_T im;\r\n} cuint416m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[14];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[14];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[15];\r\n} int480m_T;\r\n\r\ntypedef struct {\r\n  int480m_T re;\r\n  int480m_T im;\r\n} cint480m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[15];\r\n} uint480m_T;\r\n\r\ntypedef struct {\r\n  uint480m_T re;\r\n  uint480m_T im;\r\n} cuint480m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[16];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[16];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[17];\r\n} int544m_T;\r\n\r\ntypedef struct {\r\n  int544m_T re;\r\n  int544m_T im;\r\n} cint544m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[17];\r\n} uint544m_T;\r\n\r\ntypedef struct {\r\n  uint544m_T re;\r\n  uint544m_T im;\r\n} cuint544m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[18];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[18];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[19];\r\n} int608m_T;\r\n\r\ntypedef struct {\r\n  int608m_T re;\r\n  int608m_T im;\r\n} cint608m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[19];\r\n} uint608m_T;\r\n\r\ntypedef struct {\r\n  uint608m_T re;\r\n  uint608m_T im;\r\n} cuint608m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[20];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[20];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[21];\r\n} int672m_T;\r\n\r\ntypedef struct {\r\n  int672m_T re;\r\n  int672m_T im;\r\n} cint672m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[21];\r\n} uint672m_T;\r\n\r\ntypedef struct {\r\n  uint672m_T re;\r\n  uint672m_T im;\r\n} cuint672m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[22];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[22];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[23];\r\n} int736m_T;\r\n\r\ntypedef struct {\r\n  int736m_T re;\r\n  int736m_T im;\r\n} cint736m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[23];\r\n} uint736m_T;\r\n\r\ntypedef struct {\r\n  uint736m_T re;\r\n  uint736m_T im;\r\n} cuint736m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[24];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[24];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[25];\r\n} int800m_T;\r\n\r\ntypedef struct {\r\n  int800m_T re;\r\n  int800m_T im;\r\n} cint800m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[25];\r\n} uint800m_T;\r\n\r\ntypedef struct {\r\n  uint800m_T re;\r\n  uint800m_T im;\r\n} cuint800m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[26];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[26];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[27];\r\n} int864m_T;\r\n\r\ntypedef struct {\r\n  int864m_T re;\r\n  int864m_T im;\r\n} cint864m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[27];\r\n} uint864m_T;\r\n\r\ntypedef struct {\r\n  uint864m_T re;\r\n  uint864m_T im;\r\n} cuint864m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[28];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[28];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[29];\r\n} int928m_T;\r\n\r\ntypedef struct {\r\n  int928m_T re;\r\n  int928m_T im;\r\n} cint928m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[29];\r\n} uint928m_T;\r\n\r\ntypedef struct {\r\n  uint928m_T re;\r\n  uint928m_T im;\r\n} cuint928m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[30];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[30];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[31];\r\n} int992m_T;\r\n\r\ntypedef struct {\r\n  int992m_T re;\r\n  int992m_T im;\r\n} cint992m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[31];\r\n} uint992m_T;\r\n\r\ntypedef struct {\r\n  uint992m_T re;\r\n  uint992m_T im;\r\n} cuint992m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[32];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[32];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[33];\r\n} int1056m_T;\r\n\r\ntypedef struct {\r\n  int1056m_T re;\r\n  int1056m_T im;\r\n} cint1056m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[33];\r\n} uint1056m_T;\r\n\r\ntypedef struct {\r\n  uint1056m_T re;\r\n  uint1056m_T im;\r\n} cuint1056m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[34];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[34];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[35];\r\n} int1120m_T;\r\n\r\ntypedef struct {\r\n  int1120m_T re;\r\n  int1120m_T im;\r\n} cint1120m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[35];\r\n} uint1120m_T;\r\n\r\ntypedef struct {\r\n  uint1120m_T re;\r\n  uint1120m_T im;\r\n} cuint1120m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[36];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[36];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[37];\r\n} int1184m_T;\r\n\r\ntypedef struct {\r\n  int1184m_T re;\r\n  int1184m_T im;\r\n} cint1184m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[37];\r\n} uint1184m_T;\r\n\r\ntypedef struct {\r\n  uint1184m_T re;\r\n  uint1184m_T im;\r\n} cuint1184m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[38];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[38];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[39];\r\n} int1248m_T;\r\n\r\ntypedef struct {\r\n  int1248m_T re;\r\n  int1248m_T im;\r\n} cint1248m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[39];\r\n} uint1248m_T;\r\n\r\ntypedef struct {\r\n  uint1248m_T re;\r\n  uint1248m_T im;\r\n} cuint1248m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[40];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[40];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[41];\r\n} int1312m_T;\r\n\r\ntypedef struct {\r\n  int1312m_T re;\r\n  int1312m_T im;\r\n} cint1312m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[41];\r\n} uint1312m_T;\r\n\r\ntypedef struct {\r\n  uint1312m_T re;\r\n  uint1312m_T im;\r\n} cuint1312m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[42];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[42];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[43];\r\n} int1376m_T;\r\n\r\ntypedef struct {\r\n  int1376m_T re;\r\n  int1376m_T im;\r\n} cint1376m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[43];\r\n} uint1376m_T;\r\n\r\ntypedef struct {\r\n  uint1376m_T re;\r\n  uint1376m_T im;\r\n} cuint1376m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[44];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[44];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[45];\r\n} int1440m_T;\r\n\r\ntypedef struct {\r\n  int1440m_T re;\r\n  int1440m_T im;\r\n} cint1440m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[45];\r\n} uint1440m_T;\r\n\r\ntypedef struct {\r\n  uint1440m_T re;\r\n  uint1440m_T im;\r\n} cuint1440m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[46];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[46];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[47];\r\n} int1504m_T;\r\n\r\ntypedef struct {\r\n  int1504m_T re;\r\n  int1504m_T im;\r\n} cint1504m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[47];\r\n} uint1504m_T;\r\n\r\ntypedef struct {\r\n  uint1504m_T re;\r\n  uint1504m_T im;\r\n} cuint1504m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[48];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[48];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[49];\r\n} int1568m_T;\r\n\r\ntypedef struct {\r\n  int1568m_T re;\r\n  int1568m_T im;\r\n} cint1568m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[49];\r\n} uint1568m_T;\r\n\r\ntypedef struct {\r\n  uint1568m_T re;\r\n  uint1568m_T im;\r\n} cuint1568m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[50];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[50];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[51];\r\n} int1632m_T;\r\n\r\ntypedef struct {\r\n  int1632m_T re;\r\n  int1632m_T im;\r\n} cint1632m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[51];\r\n} uint1632m_T;\r\n\r\ntypedef struct {\r\n  uint1632m_T re;\r\n  uint1632m_T im;\r\n} cuint1632m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[52];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[52];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[53];\r\n} int1696m_T;\r\n\r\ntypedef struct {\r\n  int1696m_T re;\r\n  int1696m_T im;\r\n} cint1696m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[53];\r\n} uint1696m_T;\r\n\r\ntypedef struct {\r\n  uint1696m_T re;\r\n  uint1696m_T im;\r\n} cuint1696m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[54];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[54];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[55];\r\n} int1760m_T;\r\n\r\ntypedef struct {\r\n  int1760m_T re;\r\n  int1760m_T im;\r\n} cint1760m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[55];\r\n} uint1760m_T;\r\n\r\ntypedef struct {\r\n  uint1760m_T re;\r\n  uint1760m_T im;\r\n} cuint1760m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[56];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[56];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[57];\r\n} int1824m_T;\r\n\r\ntypedef struct {\r\n  int1824m_T re;\r\n  int1824m_T im;\r\n} cint1824m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[57];\r\n} uint1824m_T;\r\n\r\ntypedef struct {\r\n  uint1824m_T re;\r\n  uint1824m_T im;\r\n} cuint1824m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[58];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[58];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[59];\r\n} int1888m_T;\r\n\r\ntypedef struct {\r\n  int1888m_T re;\r\n  int1888m_T im;\r\n} cint1888m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[59];\r\n} uint1888m_T;\r\n\r\ntypedef struct {\r\n  uint1888m_T re;\r\n  uint1888m_T im;\r\n} cuint1888m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[60];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[60];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[61];\r\n} int1952m_T;\r\n\r\ntypedef struct {\r\n  int1952m_T re;\r\n  int1952m_T im;\r\n} cint1952m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[61];\r\n} uint1952m_T;\r\n\r\ntypedef struct {\r\n  uint1952m_T re;\r\n  uint1952m_T im;\r\n} cuint1952m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[62];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[62];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[63];\r\n} int2016m_T;\r\n\r\ntypedef struct {\r\n  int2016m_T re;\r\n  int2016m_T im;\r\n} cint2016m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[63];\r\n} uint2016m_T;\r\n\r\ntypedef struct {\r\n  uint2016m_T re;\r\n  uint2016m_T im;\r\n} cuint2016m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[64];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[64];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\soure\\Desktop\\Uni Sachen\\CT-Verification\\Possible Controller\\Implementation\\UAV\\UAV_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"UAV\".\r\n *\r\n * Model version              : 1.7\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C++ source code generated on : Thu Feb 27 20:31:25 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtmodel_h_\r\n#define rtmodel_h_\r\n#include \"UAV.h\"\r\n#define MODEL_CLASSNAME                UAV\r\n#define MODEL_STEPNAME                 step\r\n#define GRTINTERFACE                   0\r\n\r\n/*\r\n * ROOT_IO_FORMAT: 0 (Individual arguments)\r\n * ROOT_IO_FORMAT: 1 (Structure reference)\r\n * ROOT_IO_FORMAT: 2 (Part of model data structure)\r\n */\r\n#define ROOT_IO_FORMAT                 2\r\n#endif                                 /* rtmodel_h_ */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};